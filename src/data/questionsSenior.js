const questionsSenior = [
  {
    title: 'Что делает useMemo?',
    variants: [
      'Запоминает результат вычислений между рендерами',
      'Запоминает компонент',
      'Кеширует запросы к API',
    ],
    correct: 0,
    explanation: 'useMemo мемоизирует вычисления для оптимизации производительности.',
  },
  {
    title: 'Когда использовать useCallback?',
    variants: [
      'Чтобы избежать лишнего создания функции при ререндере',
      'Чтобы создать ссылку на DOM',
      'Чтобы вызвать хук внутри условия',
    ],
    correct: 0,
    explanation: 'useCallback возвращает ту же функцию между рендерами при тех же зависимостях.',
  },
  {
    title: 'Как работает Context API?',
    variants: [
      'Позволяет передавать данные по иерархии без props',
      'Хранит глобальное состояние',
      'Управляет маршрутизацией',
    ],
    correct: 0,
    explanation: 'Context API позволяет избегать "prop drilling" при передаче данных глубоко.',
  },
  {
    title: 'Что делает React.lazy?',
    variants: [
      'Загружает компонент динамически',
      'Создаёт отложенную функцию',
      'Откладывает выполнение useEffect',
    ],
    correct: 0,
    explanation: 'React.lazy позволяет отложенно загружать компоненты — полезно для оптимизации.',
  },
  {
    title: 'Что делает Suspense?',
    variants: [
      'Показывает fallback пока компонент загружается',
      'Увеличивает производительность',
      'Показывает сообщение об ошибке',
    ],
    correct: 0,
    explanation: 'Suspense используется совместно с lazy для отображения заглушки при загрузке.',
  },
  {
    title: 'Какой хук может заменить Redux в малых проектах?',
    variants: ['useMemo', 'useContext + useReducer', 'useCallback'],
    correct: 1,
    explanation: 'useContext и useReducer можно использовать как альтернативу Redux.',
  },
  {
    title: 'Что делает forwardRef?',
    variants: [
      'Передаёт ref дочернему компоненту',
      'Создаёт глобальный ref',
      'Обновляет ref вручную',
    ],
    correct: 0,
    explanation: 'forwardRef нужен, чтобы пробросить ref через компонент.',
  },
  {
    title: 'Что такое "порталы" (React Portals)?',
    variants: [
      'Способ рендерить компонент вне текущей DOM-иерархии',
      'Новый способ передачи props',
      'Механизм работы useMemo',
    ],
    correct: 0,
    explanation: 'Portals позволяют вставить компонент в произвольное место DOM.',
  },
  {
    title: 'Как работает useLayoutEffect в отличие от useEffect?',
    variants: [
      'Выполняется синхронно перед отрисовкой',
      'Работает только с DOM',
      'Выполняется медленнее',
    ],
    correct: 0,
    explanation: 'useLayoutEffect срабатывает до отрисовки, синхронно.',
  },
  {
    title: 'Что такое HOC (Higher Order Component)?',
    variants: [
      'Компонент, который возвращает другой компонент с дополнительной логикой',
      'Компонент, написанный на классе',
      'Компонент, который использует useEffect',
    ],
    correct: 0,
    explanation: 'HOC — это функция, которая принимает компонент и возвращает новый, обёрнутый.',
  },
];

export default questionsSenior;
